apply plugin: 'com.android.application'

def releaseTime() {
    return new Date().format("yyyyMMdd_HHmmss")
}

android {
    compileSdkVersion 24
    buildToolsVersion '25'
    signingConfigs {
        release {
            storeFile file('keystore.jks')
            storePassword 'liyang.sun'
            keyAlias 'DTZJ'
            keyPassword 'sunliyang'
        }
        debug {
            storeFile file('keystore.jks')
            storePassword 'liyang.sun'
            keyAlias 'DTZJ'
            keyPassword 'sunliyang'
        }
    }
    defaultConfig {
        applicationId "com.tcl.funday"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    productFlavors {
        product {
            buildConfigField "String", "CHANNEL", "\"product\""
        }
    }
    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->

            def outputFile = output.outputFile
            def fileName = "BucketExpert.apk"
            def versionName = "${defaultConfig.versionName}.${defaultConfig.versionCode}"
            output.outputFile = new File(outputFile.parent, fileName)

            delete fileTree(dir: output.outputFile.parent, include: '*unaligned*.apk')

            if (output.zipAlign != null) {
                output.zipAlign.doLast {
                    copy {
                        from output.outputFile
                        into output.outputFile.parent
                        def productFlavorsName = "";
                        if (variant.productFlavors.size() > 0) {
                            productFlavorsName = variant.productFlavors[0].name
                        } else {
                            productFlavorsName = variant.name
                        }
                        rename("BucketExpert.apk", "BucketExpert" + "_" + versionName + "_" + productFlavorsName + "_" + releaseTime() + "_" + buildType.name + ".apk")
                    }
                }
            }

            output.assemble.doLast {
                delete fileTree(dir: 'build/outputs/apk', include: "*unaligned*.apk")
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support:cardview-v7:24.2.1'
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:design:24.2.1'
    compile 'com.squareup.okhttp:okhttp:2.6.0'
    compile 'com.alibaba:fastjson:1.2.6'
    compile 'pl.droidsonroids.gif:android-gif-drawable:1.1.17'
    compile project(':tabpagerindictor')
    compile project(':grid')
}

task deleteFiles(type: Delete) {
    delete fileTree('build/outputs/apk/') {
        include '**/*.apk'
    }
}

preBuild.dependsOn('deleteFiles')
